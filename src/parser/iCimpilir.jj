/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. iCimpilir.jj */
/*@egen*/PARSER_BEGIN(iCimpilir)package parser;import recovery.*;import view.JanelaPrincipal;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import javax.swing.JOptionPane;import java.io.FileWriter;import controleDeArquivos.CreateFile;import java.io.FileWriter;import javax.swing.JFileChooser;public class iCimpilir/*@bgen(jjtree)*/implements iCimpilirTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTiCimpilirState jjtree = new JJTiCimpilirState();

/*@egen*/  final static JanelaPrincipal window = new JanelaPrincipal();    public static void main(String args []) throws ParseException  {			window.setVisible(true);				window.getCompilar().addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {	  			window.setVazioConsoleMsg();				if((window.getTextArquivo().getText().equals(window.getCampoTexto())) != true)                {                  window.setControleArquivo(false);                }                if(window.getControleArquivo() || window.getTextArquivo().getText().equals(" ") )                {									inicia();		   		}else				{					if(window.getTextArquivo().getText().equals(""))	                {	                    JOptionPane.showMessageDialog (null, "Arquivo vazio!", "Arquivo", JOptionPane.WARNING_MESSAGE);	                }else{	                  int resp = JOptionPane.showConfirmDialog(null, "Salvar alteracaoes?");	                                    	  if(resp == 0)                  	  {                  	                      	    if(window.getFile() == null)                  	    {                  	     	window.salvarComo();							inicia();							                  	    }else                   	    {                  	      	window.salvar();							inicia();                  	    }                  	  }                  	}				}		   	}  		});  }  static void inicia(){    FileReader arquivo = null;    //Leitura do disco    try {			arquivo = new FileReader(window.getFile());		} catch (FileNotFoundException e2) {			e2.printStackTrace();		}		BufferedReader arq = new BufferedReader(arquivo);	    try	    {	      iCimpilir parser = new iCimpilir(arq);	    }catch (Exception e1)	    {	      iCimpilir.ReInit(arq);	    }catch (Error e1)   		{   		  iCimpilir.ReInit(arq);   		}         	try      	{    		SimpleNode n = iCimpilir.Davai();   			n.dump("", window);		}		catch (Exception e1)     	{} 		catch (Error e1)   		{}  }  static public String im(int x)  {    int k;    String s;    s = tokenImage [x];    k = s.lastIndexOf("\"");    try    {      s = s.substring(1, k);    }    catch (StringIndexOutOfBoundsException e)    {}    return s;  }  static Token lastError = null;  static boolean eof;       static void consumeUntil(RecoverySet g, ParseException e, String milos) throws ParseEOFException, ParseException  {    Token tok;    window.setConsole("\n-- " + milos + " --");    window.setConsole("\n\tConjunto de sincronizacao: " + g);    if (g == null) throw e;     tok = getToken(1);     while (!eof)    {       if (g.contains(tok.kind))      {         window.setConsole("\n\tEncontrado token de sincronizacao: " + im(tok.kind));        break;      }      window.setConsole("\n\tIgnorando o token: " + im(tok.kind));      getNextToken();       tok = getToken(1);      if (tok.kind == EOF && !g.contains(EOF))        eof = true;    }    if (tok != lastError)    {      window.setConsole(e.getMessage());      lastError = tok;    }    if (eof) throw new ParseEOFException("EOF onde nao deveria!!");  }}PARSER_END(iCimpilir)SKIP :{  " "| "\t"| "\n"| "\r"| <COMENTARIO: "//" (<COM>)* >| <COMENTARIOS: "/*" ("\n" | "\r" | <COM>)* "*/" >| <#COM: ( ~["\"","\\","\n","\r","\""] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n") ) | "\"" )*>}TOKEN :{  <   MAIN: 			"principil"	>| <	  ABRECHAVES: 		"{"			>| <	  FECHACHAVES: 		"}"			>| <	  ABREPARENTESES: 	"("			>| <	  FECHAPARENTESES: 	")"			>| <   PONTOEVIRGULA: 	";"			>| <	  IF: 				"si"		>| <	  ELSE: 			"sinii"		>| <	  WHILE: 			"inquinti"	>	| <	  DO: 				"fici"		>| <   RETURN: 			"ritirni"	>| <   PRINTF: 			"iscrivi"	>| <   FUNCAO:			"fincii"	>| <   INT: 				"intiiri"	>| <   FLOAT: 			"dicimil"	>| <	  VIRGULA: 			","			>| <	  ATRIBUICAO: 		"="			>}TOKEN :{ <	OP: ("+" | "-" | "*" | "/" )					>|<	OPL: ( "<" | ">" | "=="| "<="| ">=" |"!")		>|<	#LETRA: ["a"-"z","A"-"Z"]							> |<	#DIGITO: ["0"-"9"]									>|<	#DIGITOS: <DIGITO> (<DIGITO>)*						>|<	#LD: <LETRA> | <DIGITO>							>|<	#FSUB: ("_"(<LD>)+)								>|<	#FOP: ("."<DIGITOS>)?							>|<	#EXPOP: ("&"("+" | "-")?<DIGITOS>)?				>|<	IDENTIFICADOR: <LETRA>(<LD>)*(<FSUB>)*					>|< 	TOKEN_NUMLIT: <DIGITOS><FOP><EXPOP>						>}SimpleNode Davai() throws ParseEOFException:{/*@bgen(jjtree) Davai */
 SimpleNode jjtn000 = new SimpleNode(JJTDAVAI);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.start;}{/*@bgen(jjtree) Davai */
  try {
/*@egen*/      try {	 Principal()  	Funcoes()  }  catch (ParseException e)    {       consumeUntil(g, e, "start");    }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/        {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseEOFException) {
      throw (ParseEOFException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Funcoes() throws ParseEOFException:{/*@bgen(jjtree) Funcoes */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCOES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.variosFunc;}{/*@bgen(jjtree) Funcoes */
        try {
/*@egen*/		try {	  (Func()	  Funcoes())?    }    catch (ParseException e)    {       consumeUntil(g, e, "variosFunc");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}int Principal() throws ParseEOFException:{/*@bgen(jjtree) Principal */
 SimpleNode jjtn000 = new SimpleNode(JJTPRINCIPAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.main;}{/*@bgen(jjtree) Principal */
  try {
/*@egen*/  try {     	<MAIN> <ABRECHAVES>  		 DeclaraVaraiavel()		 SequnciaComandos()				 <FECHACHAVES>    }    catch (ParseException e)    {       consumeUntil(g, e, "main");    }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {    return 0;  	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseEOFException) {
      throw (ParseEOFException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void DeclaraVaraiavel() throws ParseEOFException:{/*@bgen(jjtree) DeclaraVaraiavel */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARAVARAIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.varDecl;}{/*@bgen(jjtree) DeclaraVaraiavel */
    try {
/*@egen*/    try {     	(Tipo() <IDENTIFICADOR> Atribuicao())*    }    catch (ParseException e)    {       consumeUntil(g, e, "varDecl");    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof ParseEOFException) {
        throw (ParseEOFException)jjte000;
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ }void Tipo() throws ParseEOFException:{/*@bgen(jjtree) Tipo */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.tipo;}{/*@bgen(jjtree) Tipo */
        try {
/*@egen*/	try {     	<INT> | <FLOAT>    }    catch (ParseException e)    {       consumeUntil(g, e, "tipo");    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Atribuicao() throws ParseEOFException:{/*@bgen(jjtree) Atribuicao */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.atribuicao;}{/*@bgen(jjtree) Atribuicao */
        try {
/*@egen*/	try {     	 Atribuir()|<PONTOEVIRGULA>     }    catch (ParseException e)    {       consumeUntil(g, e, "atribuicao");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void Atribuir() throws ParseEOFException:{/*@bgen(jjtree) Atribuir */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.atribuir;}{/*@bgen(jjtree) Atribuir */
        try {
/*@egen*/	try {     	<ATRIBUICAO> Exprecao() Loopzao()  |    	<ABREPARENTESES> ExprecaoLista() <FECHAPARENTESES> <PONTOEVIRGULA>|    	DeclaracaoM()     }    catch (ParseException e)    {       consumeUntil(g, e, "atribuir");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ExprecaoLista()throws ParseEOFException:{/*@bgen(jjtree) ExprecaoLista */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRECAOLISTA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.talvezListaExp;}{/*@bgen(jjtree) ExprecaoLista */
        try {
/*@egen*/	try {     	(ListaExprecao())?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezListaExp");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void Loopzao()throws ParseEOFException:{/*@bgen(jjtree) Loopzao */
 SimpleNode jjtn000 = new SimpleNode(JJTLOOPZAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.loop;}{/*@bgen(jjtree) Loopzao */
        try {
/*@egen*/  	try {     	DeclaracaoM() | <PONTOEVIRGULA>    }    catch (ParseException e)    {       consumeUntil(g, e, "loop");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/   }void ListaExprecao() throws ParseEOFException:{/*@bgen(jjtree) ListaExprecao */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAEXPRECAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.listaExp;}{/*@bgen(jjtree) ListaExprecao */
        try {
/*@egen*/  	try {     	Exprecao() ListaExp2()    }    catch (ParseException e)    {       consumeUntil(g, e, "listaExp");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ListaExp2() throws ParseEOFException:{/*@bgen(jjtree) ListaExp2 */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAEXP2);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.listaExp2;}{/*@bgen(jjtree) ListaExp2 */
        try {
/*@egen*/	try {     	(<VIRGULA> Exprecao() ListaExp2())?    }    catch (ParseException e)    {       consumeUntil(g, e, "listaExp2");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void DeclaracaoM() throws ParseEOFException:{/*@bgen(jjtree) DeclaracaoM */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAOM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.mdeclaracao;}{/*@bgen(jjtree) DeclaracaoM */
        try {
/*@egen*/	try {     	<VIRGULA> <IDENTIFICADOR> Atribuicao()    }    catch (ParseException e)    {       consumeUntil(g, e, "mdeclaracao");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  	}void Exprecao() throws ParseEOFException:{/*@bgen(jjtree) Exprecao */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRECAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.exp;}{/*@bgen(jjtree) Exprecao */
        try {
/*@egen*/	try {     	<ABREPARENTESES> Exprecao() <OP> Exprecao() <FECHAPARENTESES> | Fator()    }    catch (ParseException e)    {       consumeUntil(g, e, "exp");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	}void Fator() throws ParseEOFException:{/*@bgen(jjtree) Fator */
 SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.fator;}{/*@bgen(jjtree) Fator */
        try {
/*@egen*/	try {     	<IDENTIFICADOR> Fator2() | <TOKEN_NUMLIT>    }    catch (ParseException e)    {       consumeUntil(g, e, "fator");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void Fator2() throws ParseEOFException:{/*@bgen(jjtree) Fator2 */
 SimpleNode jjtn000 = new SimpleNode(JJTFATOR2);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.talvezFator;}{/*@bgen(jjtree) Fator2 */
        try {
/*@egen*/	try {     	(<ABREPARENTESES>ExprecaoLista() <FECHAPARENTESES>)?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezFator");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 	}void SequnciaComandos() throws ParseEOFException:{/*@bgen(jjtree) SequnciaComandos */
 SimpleNode jjtn000 = new SimpleNode(JJTSEQUNCIACOMANDOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.seqComandos;}{/*@bgen(jjtree) SequnciaComandos */
        try {
/*@egen*/	try {     	(Comando()SequnciaComandos())?    }    catch (ParseException e)    {       consumeUntil(g, e, "seqComandos");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void Comando()throws ParseEOFException:{/*@bgen(jjtree) Comando */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMANDO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.comando;}{/*@bgen(jjtree) Comando */
        try {
/*@egen*/	try {     	<IDENTIFICADOR> Atribuir() 		| <IF> <ABREPARENTESES> ExprecoesLogicas() <FECHAPARENTESES><ABRECHAVES>SequnciaComandos()<FECHACHAVES> Else()		| <WHILE> <ABREPARENTESES> ExprecoesLogicas() <FECHAPARENTESES><ABRECHAVES>SequnciaComandos()<FECHACHAVES> <PONTOEVIRGULA>		| <DO> <ABRECHAVES>SequnciaComandos()<FECHACHAVES> <WHILE> <ABREPARENTESES> ExprecoesLogicas() <FECHAPARENTESES> <PONTOEVIRGULA>								| <RETURN> Exprecao() <PONTOEVIRGULA>		| <PRINTF> <ABREPARENTESES> Exprecao() <FECHAPARENTESES> <PONTOEVIRGULA>    }    catch (ParseException e)    {       consumeUntil(g, e, "comando");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/   }void Else()throws ParseEOFException:{/*@bgen(jjtree) Else */
 SimpleNode jjtn000 = new SimpleNode(JJTELSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.talvezElse;}{/*@bgen(jjtree) Else */
        try {
/*@egen*/	try {     	(<ELSE> <ABRECHAVES>SequnciaComandos()<FECHACHAVES>)?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezElse");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/   }void ExprecoesLogicas() throws ParseEOFException:{/*@bgen(jjtree) ExprecoesLogicas */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRECOESLOGICAS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.exp_logicas;}{/*@bgen(jjtree) ExprecoesLogicas */
        try {
/*@egen*/	try {     	<ABREPARENTESES> ExprecoesLogicas() <OPL> ExprecoesLogicas() <FECHAPARENTESES> | FatorLogico()    }    catch (ParseException e)    {       consumeUntil(g, e, "exp_logicas");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  	}void FatorLogico() throws ParseEOFException:{/*@bgen(jjtree) FatorLogico */
 SimpleNode jjtn000 = new SimpleNode(JJTFATORLOGICO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.fator_logico;}{/*@bgen(jjtree) FatorLogico */
        try {
/*@egen*/	try {     	<IDENTIFICADOR> | <TOKEN_NUMLIT>     }    catch (ParseException e)    {       consumeUntil(g, e, "fator_logico");    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void Func() throws ParseEOFException:{/*@bgen(jjtree) Func */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.func;}{/*@bgen(jjtree) Func */
        try {
/*@egen*/	try {     	<FUNCAO> Tipo() <IDENTIFICADOR> <ABREPARENTESES> ListaArgumentos() <FECHAPARENTESES> <ABRECHAVES> DeclaraVaraiavel() SequnciaComandos() <FECHACHAVES>    }    catch (ParseException e)    {       consumeUntil(g, e, "func");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}void ListaArgumentos()throws ParseEOFException:{/*@bgen(jjtree) ListaArgumentos */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTAARGUMENTOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.talvezLista1Argumentos;}{/*@bgen(jjtree) ListaArgumentos */
        try {
/*@egen*/	try { ( Lista1Argumentos() )?    }    catch (ParseException e)    {       consumeUntil(g, e, "talvezLista1Argumentos");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	}void Lista1Argumentos()throws ParseEOFException:{/*@bgen(jjtree) Lista1Argumentos */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTA1ARGUMENTOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.listaArg;}{/*@bgen(jjtree) Lista1Argumentos */
        try {
/*@egen*/	try {     	Tipo() <IDENTIFICADOR> Lista2Argumentos()    }    catch (ParseException e)    {       consumeUntil(g, e, "listaArg");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  }void Lista2Argumentos()throws ParseEOFException:{/*@bgen(jjtree) Lista2Argumentos */
 SimpleNode jjtn000 = new SimpleNode(JJTLISTA2ARGUMENTOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet g = First.listaArg2;}{/*@bgen(jjtree) Lista2Argumentos */
        try {
/*@egen*/	try { (<VIRGULA> Tipo() <IDENTIFICADOR> Lista2Argumentos())?    }    catch (ParseException e)    {       consumeUntil(g, e, "listaArg2");    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof ParseEOFException) {
            throw (ParseEOFException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 		}