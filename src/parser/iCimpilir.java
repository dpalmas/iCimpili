/* Generated By:JJTree&JavaCC: Do not edit this line. iCimpilir.java */
package parser;

import recovery.*;
import GUI.Tela;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import javax.swing.JOptionPane;

public class iCimpilir/*@bgen(jjtree)*/ implements iCimpilirTreeConstants, iCimpilirConstants {/*@bgen(jjtree)*/
    protected static JJTiCimpilirState jjtree = new JJTiCimpilirState();
    final static Tela window = new Tela();

    public static void main(String args[]) throws ParseException {
        window.setVisible(true);

        window.getCompilar().addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                window.setVazioConsoleMsg();

                if ((window.getTextArquivo().getText().equals(window.getCampoTexto())) != true) {
                    window.setControleArquivo(false);
                }

                if (window.getControleArquivo() || window.getTextArquivo().getText().equals(" ")) {
                    inicia();
                } else {
                    if (window.getTextArquivo().getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Arquivo vazio!", "Arquivo", JOptionPane.WARNING_MESSAGE);
                    } else {
                        int resp = JOptionPane.showConfirmDialog(null, "Salvar alteracaoes?");

                        if (resp == 0) {

                            if (window.getFile() == null) {
                                window.salvarComo();
                                inicia();

                            } else {
                                window.salvar();
                                inicia();
                            }
                        }
                    }
                }
            }
        });
    }

    static void inicia() {
        FileReader arquivo = null;
        //Leitura do disco
        try {
            arquivo = new FileReader(window.getFile());
        } catch (FileNotFoundException e2) {
            e2.printStackTrace();
        }
        BufferedReader arq = new BufferedReader(arquivo);
        try {
            iCimpilir parser = new iCimpilir(arq);
        } catch (Exception e1) {
            iCimpilir.ReInit(arq);
        } catch (Error e1) {
            iCimpilir.ReInit(arq);
        }

        try {
            SimpleNode n = iCimpilir.Davai();
            n.dump("", window);
        } catch (Exception e1) {
        } catch (Error e1) {
        }
    }

    static public String im(int x) {
        int k;
        String s;
        s = tokenImage[x];
        k = s.lastIndexOf("\u005c"");
        try {
            s = s.substring(1, k);
        } catch (StringIndexOutOfBoundsException e) {
        }
        return s;
    }

    static Token lastError = null;

    static boolean eof;

    static void consumeUntil(RecoverySet g, ParseException e, String milos) throws ParseEOFException, ParseException {
        Token tok;
        window.setConsole("\u005cn-- " + milos + " --");
        window.setConsole("\u005cn\u005ctConjunto de sincronizacao: " + g);
        if (g == null) {
            throw e;
        }
        tok = getToken(1);
        while (!eof) {
            if (g.contains(tok.kind)) {
                window.setConsole("\u005cn\u005ctEncontrado token de sincronizacao: " + im(tok.kind));
                break;
            }
            window.setConsole("\u005cn\u005ctIgnorando o token: " + im(tok.kind));
            getNextToken();
            tok = getToken(1);
            if (tok.kind == EOF && !g.contains(EOF)) {
                eof = true;
            }
        }
        if (tok != lastError) {
            window.setConsole(e.getMessage());
            lastError = tok;
        }
        if (eof) {
            throw new ParseEOFException("EOF onde nao deveria!!");
        }
    }

    static final public SimpleNode Davai() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Davai */
        SimpleNode jjtn000 = new SimpleNode(JJTDAVAI);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.start;
        try {
            try {
                Principal();
                Funcoes();
            } catch (ParseException e) {
                consumeUntil(g, e, "start");
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if (true) {
                    return jjtn000;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    static final public void Funcoes() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Funcoes */
        SimpleNode jjtn000 = new SimpleNode(JJTFUNCOES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.variosFunc;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case FUNCAO:
                        Func();
                        Funcoes();
                        break;
                    default:
                        jj_la1[0] = jj_gen;
                        ;
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "variosFunc");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public int Principal() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Principal */
        SimpleNode jjtn000 = new SimpleNode(JJTPRINCIPAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.main;
        try {
            try {
                jj_consume_token(MAIN);
                jj_consume_token(ABRECHAVES);
                DeclaraVaraiavel();
                SequnciaComandos();
                jj_consume_token(FECHACHAVES);
            } catch (ParseException e) {
                consumeUntil(g, e, "main");
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if (true) {
                    return 0;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    static final public void DeclaraVaraiavel() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) DeclaraVaraiavel */
        SimpleNode jjtn000 = new SimpleNode(JJTDECLARAVARAIAVEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.varDecl;
        try {
            try {
                label_1:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case INT:
                        case FLOAT:
            ;
                            break;
                        default:
                            jj_la1[1] = jj_gen;
                            break label_1;
                    }
                    Tipo();
                    jj_consume_token(IDENTIFICADOR);
                    Atribuicao();
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "varDecl");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Tipo() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Tipo */
        SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.tipo;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case INT:
                        jj_consume_token(INT);
                        break;
                    case FLOAT:
                        jj_consume_token(FLOAT);
                        break;
                    default:
                        jj_la1[2] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "tipo");
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Atribuicao() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Atribuicao */
        SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.atribuicao;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ABREPARENTESES:
                    case VIRGULA:
                    case ATRIBUICAO:
                        Atribuir();
                        break;
                    case PONTOEVIRGULA:
                        jj_consume_token(PONTOEVIRGULA);
                        break;
                    default:
                        jj_la1[3] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "atribuicao");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Atribuir() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Atribuir */
        SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.atribuir;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ATRIBUICAO:
                        jj_consume_token(ATRIBUICAO);
                        Exprecao();
                        Loopzao();
                        break;
                    case ABREPARENTESES:
                        jj_consume_token(ABREPARENTESES);
                        ExprecaoLista();
                        jj_consume_token(FECHAPARENTESES);
                        jj_consume_token(PONTOEVIRGULA);
                        break;
                    case VIRGULA:
                        DeclaracaoM();
                        break;
                    default:
                        jj_la1[4] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "atribuir");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void ExprecaoLista() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) ExprecaoLista */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRECAOLISTA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.talvezListaExp;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ABREPARENTESES:
                    case IDENTIFICADOR:
                    case TOKEN_NUMLIT:
                        ListaExprecao();
                        break;
                    default:
                        jj_la1[5] = jj_gen;
                        ;
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "talvezListaExp");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Loopzao() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Loopzao */
        SimpleNode jjtn000 = new SimpleNode(JJTLOOPZAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.loop;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case VIRGULA:
                        DeclaracaoM();
                        break;
                    case PONTOEVIRGULA:
                        jj_consume_token(PONTOEVIRGULA);
                        break;
                    default:
                        jj_la1[6] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "loop");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void ListaExprecao() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) ListaExprecao */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTAEXPRECAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.listaExp;
        try {
            try {
                Exprecao();
                ListaExp2();
            } catch (ParseException e) {
                consumeUntil(g, e, "listaExp");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void ListaExp2() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) ListaExp2 */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTAEXP2);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.listaExp2;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case VIRGULA:
                        jj_consume_token(VIRGULA);
                        Exprecao();
                        ListaExp2();
                        break;
                    default:
                        jj_la1[7] = jj_gen;
                        ;
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "listaExp2");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void DeclaracaoM() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) DeclaracaoM */
        SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAOM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.mdeclaracao;
        try {
            try {
                jj_consume_token(VIRGULA);
                jj_consume_token(IDENTIFICADOR);
                Atribuicao();
            } catch (ParseException e) {
                consumeUntil(g, e, "mdeclaracao");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Exprecao() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Exprecao */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRECAO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.exp;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ABREPARENTESES:
                        jj_consume_token(ABREPARENTESES);
                        Exprecao();
                        jj_consume_token(OP);
                        Exprecao();
                        jj_consume_token(FECHAPARENTESES);
                        break;
                    case IDENTIFICADOR:
                    case TOKEN_NUMLIT:
                        Fator();
                        break;
                    default:
                        jj_la1[8] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "exp");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Fator() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Fator */
        SimpleNode jjtn000 = new SimpleNode(JJTFATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.fator;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IDENTIFICADOR:
                        jj_consume_token(IDENTIFICADOR);
                        Fator2();
                        break;
                    case TOKEN_NUMLIT:
                        jj_consume_token(TOKEN_NUMLIT);
                        break;
                    default:
                        jj_la1[9] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "fator");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Fator2() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Fator2 */
        SimpleNode jjtn000 = new SimpleNode(JJTFATOR2);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.talvezFator;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ABREPARENTESES:
                        jj_consume_token(ABREPARENTESES);
                        ExprecaoLista();
                        jj_consume_token(FECHAPARENTESES);
                        break;
                    default:
                        jj_la1[10] = jj_gen;
                        ;
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "talvezFator");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void SequnciaComandos() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) SequnciaComandos */
        SimpleNode jjtn000 = new SimpleNode(JJTSEQUNCIACOMANDOS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.seqComandos;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IF:
                    case WHILE:
                    case DO:
                    case RETURN:
                    case PRINTF:
                    case IDENTIFICADOR:
                        Comando();
                        SequnciaComandos();
                        break;
                    default:
                        jj_la1[11] = jj_gen;
                        ;
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "seqComandos");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Comando() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Comando */
        SimpleNode jjtn000 = new SimpleNode(JJTCOMANDO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.comando;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IDENTIFICADOR:
                        jj_consume_token(IDENTIFICADOR);
                        Atribuir();
                        break;
                    case IF:
                        jj_consume_token(IF);
                        jj_consume_token(ABREPARENTESES);
                        ExprecoesLogicas();
                        jj_consume_token(FECHAPARENTESES);
                        jj_consume_token(ABRECHAVES);
                        SequnciaComandos();
                        jj_consume_token(FECHACHAVES);
                        Else();
                        break;
                    case WHILE:
                        jj_consume_token(WHILE);
                        jj_consume_token(ABREPARENTESES);
                        ExprecoesLogicas();
                        jj_consume_token(FECHAPARENTESES);
                        jj_consume_token(ABRECHAVES);
                        SequnciaComandos();
                        jj_consume_token(FECHACHAVES);
                        jj_consume_token(PONTOEVIRGULA);
                        break;
                    case DO:
                        jj_consume_token(DO);
                        jj_consume_token(ABRECHAVES);
                        SequnciaComandos();
                        jj_consume_token(FECHACHAVES);
                        jj_consume_token(WHILE);
                        jj_consume_token(ABREPARENTESES);
                        ExprecoesLogicas();
                        jj_consume_token(FECHAPARENTESES);
                        jj_consume_token(PONTOEVIRGULA);
                        break;
                    case RETURN:
                        jj_consume_token(RETURN);
                        Exprecao();
                        jj_consume_token(PONTOEVIRGULA);
                        break;
                    case PRINTF:
                        jj_consume_token(PRINTF);
                        jj_consume_token(ABREPARENTESES);
                        Exprecao();
                        jj_consume_token(FECHAPARENTESES);
                        jj_consume_token(PONTOEVIRGULA);
                        break;
                    default:
                        jj_la1[12] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "comando");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Else() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Else */
        SimpleNode jjtn000 = new SimpleNode(JJTELSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.talvezElse;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ELSE:
                        jj_consume_token(ELSE);
                        jj_consume_token(ABRECHAVES);
                        SequnciaComandos();
                        jj_consume_token(FECHACHAVES);
                        break;
                    default:
                        jj_la1[13] = jj_gen;
                        ;
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "talvezElse");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void ExprecoesLogicas() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) ExprecoesLogicas */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPRECOESLOGICAS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.exp_logicas;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ABREPARENTESES:
                        jj_consume_token(ABREPARENTESES);
                        ExprecoesLogicas();
                        jj_consume_token(OPL);
                        ExprecoesLogicas();
                        jj_consume_token(FECHAPARENTESES);
                        break;
                    case IDENTIFICADOR:
                    case TOKEN_NUMLIT:
                        FatorLogico();
                        break;
                    default:
                        jj_la1[14] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "exp_logicas");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void FatorLogico() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) FatorLogico */
        SimpleNode jjtn000 = new SimpleNode(JJTFATORLOGICO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.fator_logico;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IDENTIFICADOR:
                        jj_consume_token(IDENTIFICADOR);
                        break;
                    case TOKEN_NUMLIT:
                        jj_consume_token(TOKEN_NUMLIT);
                        break;
                    default:
                        jj_la1[15] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "fator_logico");
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Func() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Func */
        SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.func;
        try {
            try {
                jj_consume_token(FUNCAO);
                Tipo();
                jj_consume_token(IDENTIFICADOR);
                jj_consume_token(ABREPARENTESES);
                ListaArgumentos();
                jj_consume_token(FECHAPARENTESES);
                jj_consume_token(ABRECHAVES);
                DeclaraVaraiavel();
                SequnciaComandos();
                jj_consume_token(FECHACHAVES);
            } catch (ParseException e) {
                consumeUntil(g, e, "func");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void ListaArgumentos() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) ListaArgumentos */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTAARGUMENTOS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.talvezLista1Argumentos;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case INT:
                    case FLOAT:
                        Lista1Argumentos();
                        break;
                    default:
                        jj_la1[16] = jj_gen;
                        ;
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "talvezLista1Argumentos");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Lista1Argumentos() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Lista1Argumentos */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTA1ARGUMENTOS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.listaArg;
        try {
            try {
                Tipo();
                jj_consume_token(IDENTIFICADOR);
                Lista2Argumentos();
            } catch (ParseException e) {
                consumeUntil(g, e, "listaArg");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Lista2Argumentos() throws ParseException, ParseEOFException {
        /*@bgen(jjtree) Lista2Argumentos */
        SimpleNode jjtn000 = new SimpleNode(JJTLISTA2ARGUMENTOS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        RecoverySet g = First.listaArg2;
        try {
            try {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case VIRGULA:
                        jj_consume_token(VIRGULA);
                        Tipo();
                        jj_consume_token(IDENTIFICADOR);
                        Lista2Argumentos();
                        break;
                    default:
                        jj_la1[17] = jj_gen;
                        ;
                }
            } catch (ParseException e) {
                consumeUntil(g, e, "listaArg2");
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof ParseEOFException) {
                {
                    if (true) {
                        throw (ParseEOFException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static private boolean jj_initialized_once = false;
    /**
     * Generated Token Manager.
     */
    static public iCimpilirTokenManager token_source;
    static SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    static public Token token;
    /**
     * Next token.
     */
    static public Token jj_nt;
    static private int jj_ntk;
    static private int jj_gen;
    static final private int[] jj_la1 = new int[18];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x100000, 0x600000, 0x600000, 0x1802800, 0x1800800, 0x800, 0x802000, 0x800000, 0x800, 0x0, 0x800, 0xf4000, 0xf4000, 0x8000, 0x800, 0x0, 0x600000, 0x800000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0xc, 0xc, 0x0, 0x4, 0x4, 0x0, 0xc, 0xc, 0x0, 0x0,};
    }

    /**
     * Constructor with InputStream.
     */
    public iCimpilir(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public iCimpilir(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new iCimpilirTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 18; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 18; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor.
     */
    public iCimpilir(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new iCimpilirTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 18; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 18; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public iCimpilir(iCimpilirTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 18; i++) {
            jj_la1[i] = -1;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(iCimpilirTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 18; i++) {
            jj_la1[i] = -1;
        }
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token.
     */
    static final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    static private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;

    /**
     * Generate ParseException.
     */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[36];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 18; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 36; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    static final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    static final public void disable_tracing() {
    }

}
